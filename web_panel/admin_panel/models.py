from django.db import models
from .generate_name import generate_name
from django.core.exceptions import ValidationError
from django.core.validators import MaxValueValidator, MinValueValidator


def photo_validator(value):
    limit_mb = 2
    if value.file.size > limit_mb * 1024 * 1024:
        raise ValidationError("–§–æ—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 2–º–±")

    if str(value.file).split('.')[1] not in ['jpg', 'jpeg', 'png']:
        raise ValidationError('''–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpg, jpeg, png''')

def promo_validator(value):
    if len(value) != 12:
        raise ValidationError("–î–ª–∏–Ω–∞ –ø—Ä–æ–∫–æ–º–æ–¥–∞ 12 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)")

    if value != value.upper():
        raise ValidationError("–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏")


### –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ###
class Users(models.Model):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = models.IntegerField(verbose_name='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    user_name = models.CharField(max_length=100, verbose_name='User_name')
    first_name = models.CharField(max_length=100, verbose_name='–ò–º—è')
    contact = models.CharField(max_length=100, verbose_name='–ö–æ–Ω—Ç–∞–∫—Ç')
    language = models.CharField(max_length=100, verbose_name='–Ø–∑—ã–∫', choices=(('ru', '–†—É—Å—Å–∫–∏–π'), ('uz', '–£–∑–±–µ–∫—Å–∫–∏–π')), blank=True, null=True)

    def __str__(self):
        return self.first_name[:50]

    class Meta:
        verbose_name = "–∫–ª–∏–µ–Ω—Ç–∞"
        verbose_name_plural = "  üë§ –ö–õ–ò–ï–ù–¢–´"
### –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ###


### –ë–†–ï–ù–î–´ ###
class Brands(models.Model):
    """–ë—Ä–µ–Ω–¥—ã"""
    title_ru = models.CharField(max_length=20, verbose_name='–ë—Ä–µ–Ω–¥', help_text='–†—É—Å—Å–∫–∏–π')
    title_uz = models.CharField(max_length=20, verbose_name='–ë—Ä–µ–Ω–¥', help_text='–£–∑–±–µ–∫—Å–∫–∏–π')
    position = models.IntegerField(verbose_name='–ü–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', default=0, help_text='–ß–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –±—Ä–µ–Ω–¥ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')

    def __str__(self):
        return self.title_ru

    class Meta:
        verbose_name = "–±—Ä–µ–Ω–¥"
        verbose_name_plural = "    ‚≠ê –ë–†–ï–ù–î–´"
### –ë–†–ï–ù–î–´ ###


### –ö–ê–¢–ï–ì–û–†–ò–ò –ó–î–û–†–û–í–û–ï –ü–ò–¢–ê–ù–ò–ï ###
class CategoryHealthy(models.Model):
    """–ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"""
    title_ru = models.CharField(max_length=20, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', help_text='–†—É—Å—Å–∫–∏–π')
    title_uz = models.CharField(max_length=20, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', help_text='–£–∑–±–µ–∫—Å–∫–∏–π')
    position = models.IntegerField(verbose_name='–ü–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', default=0, help_text='–ß–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')

    def __str__(self):
        return self.title_ru

    class Meta:
        verbose_name = "–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"
        verbose_name_plural = "   ü•¶ –ó–î–û–†–û–í–û–ï –ü–ò–¢–ê–ù–ò–ï - –ö–ê–¢–ï–ì–û–†–ò–ò"
### –ö–ê–¢–ï–ì–û–†–ò–ò –ó–î–û–†–û–í–û–ï –ü–ò–¢–ê–ù–ò–ï ###


### –ü–†–û–î–£–ö–¢–´ –ó–î–û–†–û–í–û–ï –ü–ò–¢–ê–ù–ò–ï ###
def image_folder_healthy(instance, filename):
    """–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"""
    prefix = generate_name(8) + '.' + filename.split('.')[1]
    return "healthy/{prefix}".format(prefix=prefix)

class ProductsHealthy(models.Model):
    """–ú–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"""
    title_ru = models.CharField(max_length=100, verbose_name='–ü—Ä–æ–¥—É–∫—Ç', help_text='–†—É—Å—Å–∫–∏–π')
    title_uz = models.CharField(max_length=100, verbose_name='–ü—Ä–æ–¥—É–∫—Ç', help_text='–£–∑–±–µ–∫—Å–∫–∏–π')
    description_ru = models.TextField(max_length=1000, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', help_text='–†—É—Å—Å–∫–∏–π', null=True, blank=True)
    description_uz = models.TextField(max_length=1000, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', help_text='–£–∑–±–µ–∫—Å–∫–∏–π', null=True, blank=True)
    price = models.IntegerField(verbose_name='–¶–µ–Ω–∞')
    photo_path = models.ImageField(upload_to=image_folder_healthy, verbose_name='–§–æ—Ç–æ', validators = [photo_validator])
    category = models.ForeignKey(CategoryHealthy, on_delete=models.SET_NULL, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', null=True)
    brand = models.ForeignKey(Brands, on_delete=models.SET_NULL, verbose_name='–ë—Ä–µ–Ω–¥', null=True)
    status = models.IntegerField(verbose_name='–°—Ç–∞—Ç—É—Å', choices=((0, '–û—Ç–∫–ª—é—á–µ–Ω–Ω–æ'), (1, '–í–∫–ª—é—á–µ–Ω–Ω–æ')), default=1)

    def __str__(self):
        return '{} - {}'.format(self.title_ru, self.brand)

    class Meta:
        verbose_name = "–ø—Ä–æ–¥—É–∫—Ç –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"
        verbose_name_plural = "   ü•¶ –ó–î–û–†–û–í–û–ï –ü–ò–¢–ê–ù–ò–ï - –ü–†–û–î–£–ö–¢–´"
### –ü–†–û–î–£–ö–¢–´ –ó–î–û–†–û–í–û–ï –ü–ò–¢–ê–ù–ò–ï ###


### –ö–ê–¢–ï–ì–û–†–ò–ò –°–ü–û–†–¢–ò–í–ù–û–ì–û –ü–ò–¢–ê–ù–ò–ï ###
class CategorySport(models.Model):
    """–ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"""
    title_ru = models.CharField(max_length=20, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', help_text='–†—É—Å—Å–∫–∏–π')
    title_uz = models.CharField(max_length=20, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', help_text='–£–∑–±–µ–∫—Å–∫–∏–π')
    position = models.IntegerField(verbose_name='–ü–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', default=0, help_text='–ß–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')

    def __str__(self):
        return self.title_ru

    class Meta:
        verbose_name = "–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"
        verbose_name_plural = "  üèãÔ∏è‚Äç‚ôÇ –°–ü–û–†–¢–ò–í–ù–û–ï –ü–ò–¢–ê–ù–ò–ï - –ö–ê–¢–ï–ì–û–†–ò–ò"
### –ö–ê–¢–ï–ì–û–†–ò–ò –°–ü–û–†–¢–ò–í–ù–û–ì–û –ü–ò–¢–ê–ù–ò–ï ###


### –ü–†–û–î–£–ö–¢–´ –°–ü–û–†–¢–ò–í–ù–û–ì–û –ü–ò–¢–ê–ù–ò–ï ###
def image_folder_sport(instance, filename):
    """–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"""
    prefix = generate_name(8) + '.' + filename.split('.')[1]
    return "sport/{prefix}".format(prefix=prefix)

class ProductsSport(models.Model):
    """–ú–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"""
    title_ru = models.CharField(max_length=100, verbose_name='–ü—Ä–æ–¥—É–∫—Ç', help_text='–†—É—Å—Å–∫–∏–π')
    title_uz = models.CharField(max_length=100, verbose_name='–ü—Ä–æ–¥—É–∫—Ç', help_text='–£–∑–±–µ–∫—Å–∫–∏–π')
    description_ru = models.TextField(max_length=1000, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', help_text='–†—É—Å—Å–∫–∏–π', null=True, blank=True)
    description_uz = models.TextField(max_length=1000, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', help_text='–£–∑–±–µ–∫—Å–∫–∏–π', null=True, blank=True)
    price = models.IntegerField(verbose_name='–¶–µ–Ω–∞')
    photo_path = models.ImageField(upload_to=image_folder_sport, verbose_name='–§–æ—Ç–æ', validators = [photo_validator])
    category = models.ForeignKey(CategorySport, on_delete=models.SET_NULL, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', null=True)
    brand = models.ForeignKey(Brands, on_delete=models.SET_NULL, verbose_name='–ë—Ä–µ–Ω–¥', null=True)
    status = models.IntegerField(verbose_name='–°—Ç–∞—Ç—É—Å', choices=((0, '–û—Ç–∫–ª—é—á–µ–Ω–Ω–æ'), (1, '–í–∫–ª—é—á–µ–Ω–Ω–æ')), default=1)

    def __str__(self):
        return '{} - {}'.format(self.title_ru, self.brand)

    class Meta:
        verbose_name = "–ø—Ä–æ–¥—É–∫—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è"
        verbose_name_plural = "  üèãÔ∏è‚Äç‚ôÇ –°–ü–û–†–¢–ò–í–ù–û–ï –ü–ò–¢–ê–ù–ò–ï - –ü–†–û–î–£–ö–¢–´"
### –ü–†–û–î–£–ö–¢–´ –°–ü–û–†–¢–ò–í–ù–û–ì–û –ü–ò–¢–ê–ù–ò–ï ###


### –ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê ###
class CountOrder(models.Model):
    """–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"""
    count = models.IntegerField(verbose_name='–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
### –ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê ###


### –ó–ê–ö–ê–ó–´ ###
class Orders(models.Model):
    """–ó–∞–∫–∞–∑—ã"""
    count = models.IntegerField(verbose_name='‚Ññ –ù–æ–º–µ—Ä')
    user_id = models.IntegerField(verbose_name='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    first_name = models.CharField(max_length=100, verbose_name='–ò–º—è')
    contact = models.CharField(max_length=100, verbose_name='–ö–æ–Ω—Ç–∞–∫—Ç')
    order_text = models.TextField(verbose_name='–ó–∞–∫–∞–∑')
    full_price = models.IntegerField(verbose_name='–¶–µ–Ω–∞')
    date = models.CharField(max_length=100, verbose_name='–î–∞—Ç–∞ / –í—Ä–µ–º—è')
    type_payment = models.CharField(max_length=100, verbose_name='–¢–∏–ø –æ–ø–ª–∞—Ç—ã', choices=(('cash', '–ù–∞–ª–∏—á–Ω—ã–µ'), ('payme', 'PayMe')))
    type_delivery = models.CharField(max_length=100, verbose_name='–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', choices=(('self', '–°–∞–º–æ–≤—ã–≤–æ–∑'), ('delivery', '–î–æ—Å—Ç–∞–≤–∫–∞')))
    status = models.IntegerField(verbose_name='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', choices=((0, "üõí –ù–æ–≤—ã–π"), (1, "‚úÖ –ü—Ä–∏–Ω—è—Ç"), (2, "‚åõ –û–∂–∏–¥–∞–Ω–∏–µ"), (3, "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω")))
    message_id_chat = models.IntegerField(verbose_name='ID —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –∫–∞–Ω–∞–ª–µ')

    def __str__(self):
        return self.order_text[:10]

    class Meta:
        verbose_name = "–∑–∞–∫–∞–∑"
        verbose_name_plural = " üõí –ó–ê–ö–ê–ó–´"
### –ó–ê–ö–ê–ó–´ ####


### –ê–ö–¶–ò–ò ###
def image_folder_actions(instance, filename):
    prefix = generate_name(10) + '.' + filename.split('.')[1]
    return "actions/{prefix}".format(prefix=prefix)

class Actions(models.Model):
    """–ê–∫—Ü–∏–∏"""
    title_ru = models.TextField(max_length=1000, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏', help_text='–†—É—Å—Å–∫–∏–π')
    title_uz = models.TextField(max_length=1000, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏', help_text='–£–∑–±–µ–∫—Å–∫–∏–π')
    category = models.CharField(max_length=100, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', blank=True, null=True, help_text='–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.<br>–î–ª—è —É–¥–æ–±–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
    status = models.IntegerField(verbose_name='–°—Ç–∞—Ç—É—Å', choices=((0, '–û—Ç–∫–ª—é—á–µ–Ω–∞'), (1, '–í–∫–ª—é—á–µ–Ω–∞')), default=1)
    photo_path = models.ImageField(upload_to=image_folder_actions, verbose_name='–§–æ—Ç–æ –∞–∫—Ü–∏–∏', validators=[photo_validator])

    def __str__(self):
        return self.title_ru[:30]

    class Meta:
        verbose_name = "–∞–∫—Ü–∏—é"
        verbose_name_plural = "üéÅ –ê–ö–¶–ò–ò"
### –ê–ö–¶–ò–ò ###


### –ù–û–í–û–°–¢–ò ###
def image_folder_news(instance, filename):
    prefix = generate_name(10) + '.' + filename.split('.')[1]
    return "news/{prefix}".format(prefix=prefix)

class News(models.Model):
    """–ù–æ–≤–æ—Å—Ç–∏"""
    title_ru = models.TextField(max_length=1000, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', help_text='–†—É—Å—Å–∫–∏–π')
    title_uz = models.TextField(max_length=1000, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', help_text='–£–∑–±–µ–∫—Å–∫–∏–π')
    category = models.CharField(max_length=100, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', blank=True, null=True, help_text='–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.<br>–î–ª—è —É–¥–æ–±–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏')
    status = models.IntegerField(verbose_name='–°—Ç–∞—Ç—É—Å', choices=((0, '–û—Ç–∫–ª—é—á–µ–Ω–∞'), (1, '–í–∫–ª—é—á–µ–Ω–∞')), default=1)
    photo_path = models.ImageField(upload_to=image_folder_news, verbose_name='–§–æ—Ç–æ –∞–∫—Ü–∏–∏', validators=[photo_validator])

    def __str__(self):
        return self.title_ru[:30]

    class Meta:
        verbose_name = "–Ω–æ–≤–æ—Å—Ç—å"
        verbose_name_plural = "‚ùì –ù–û–í–û–°–¢–ò"
### –ù–û–í–û–°–¢–ò ###


### –ü–ê–†–¢–ù–ï–†–ö–ê ###
class Partnership(models.Model):
    """–ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞"""
    user_id = models.ForeignKey(Users, on_delete=models.SET_NULL, null=True, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    brand_name = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞')
    full_name = models.CharField(max_length=100, verbose_name='–§.–ò.–û.')
    contact = models.CharField(max_length=100, verbose_name='–ö–æ–Ω—Ç–∞–∫—Ç')
    document = models.FileField(verbose_name='–î–æ–∫—É–º–µ–Ω—Ç', null=True, blank=True)
    comment = models.TextField(max_length=4000, verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', null=True, blank=True)
    brand = models.ForeignKey(Brands, on_delete=models.SET_NULL, null=True, blank=True, verbose_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥—É', help_text='–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–≥ –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')

    def __str__(self):
        return self.full_name

    class Meta:
        verbose_name = "–±—Ä–µ–Ω–¥"
        verbose_name_plural = "  ü§ù –ü–ê–†–¢–ù–ï–†–ö–ê"
### –ü–ê–†–¢–ù–ï–†–ö–ê ###


### –ü–†–û–ú–û–ö–û–î–´ ###
class PromocodesHealth(models.Model):
    """–ü—Ä–æ–º–æ–∫–æ–¥—ã"""
    products = models.ManyToManyField(ProductsHealthy, verbose_name='–ü—Ä–æ–¥—É–∫—Ç—ã')
    type_active = models.CharField(max_length=100, verbose_name='–ê–∫—Ç–∏–≤–µ–Ω –ø–æ', choices=(('date', '–î–ê–¢–ï/–í–†–ï–ú–ï–ù–ò'), ('count', '–ö–û–õ–ò–ß–ï–°–¢–í–£ –ê–ö–¢–ò–í–ê–¶–ò–ô')))

    date_active = models.DateTimeField(verbose_name='–î–∞—Ç–∞/–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', null=True, blank=True, help_text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏<br></b>–ê–∫—Ç–∏–≤–µ–Ω –ø–æ –î–ê–¢–ï/–í–†–ï–ú–ï–ù–ò</b>')
    count_active = models.IntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π', null=True, blank=True, validators=[MinValueValidator(1)],
                                       help_text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏<br></b>–ê–∫—Ç–∏–≤–µ–Ω –ø–æ –ö–û–õ–ò–ß–ï–°–¢–í–£ –ê–ö–¢–ò–í–ê–¶–ò–ô</b>')

    promocode = models.CharField(max_length=12, verbose_name='–ü—Ä–æ–º–æ–∫–æ–¥', validators=[promo_validator])
    discount = models.IntegerField(verbose_name='–°–∫–∏–¥–∫–∞ (%)', validators=[MinValueValidator(0), MaxValueValidator(100)])
    status = models.IntegerField(verbose_name='–°—Ç–∞—Ç—É—Å', choices=((0, '–ù–µ –∞–∫—Ç–∏–≤–Ω—ã–π'), (1, '–ê–∫—Ç–∏–Ω–≤—ã–π')), default=1)

    def __str__(self):
        return self.promocode

    class Meta:
        verbose_name = "–ø—Ä–æ–º–æ–∫–æ–¥"
        verbose_name_plural = "üî≤ –ü–†–û–ú–û–ö–û–î–´ - –ó–î–û–†–û–í–û–ï –ü–ò–¢–ê–ù–ò–ï"


class PromocodesSport(models.Model):
    """–ü—Ä–æ–º–æ–∫–æ–¥—ã"""
    products = models.ManyToManyField(ProductsSport, verbose_name='–ü—Ä–æ–¥—É–∫—Ç—ã')
    type_active = models.CharField(max_length=100, verbose_name='–ê–∫—Ç–∏–≤–µ–Ω –ø–æ', choices=(('date', '–î–ê–¢–ï/–í–†–ï–ú–ï–ù–ò'), ('count', '–ö–û–õ–ò–ß–ï–°–¢–í–£ –ê–ö–¢–ò–í–ê–¶–ò–ô')))

    date_active = models.DateTimeField(verbose_name='–î–∞—Ç–∞/–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', null=True, blank=True, help_text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏<br></b>–ê–∫—Ç–∏–≤–µ–Ω –ø–æ –î–ê–¢–ï/–í–†–ï–ú–ï–ù–ò</b>')
    count_active = models.IntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π', null=True, blank=True, validators=[MinValueValidator(1)],
                                       help_text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏<br></b>–ê–∫—Ç–∏–≤–µ–Ω –ø–æ –ö–û–õ–ò–ß–ï–°–¢–í–£ –ê–ö–¢–ò–í–ê–¶–ò–ô</b>')

    promocode = models.CharField(max_length=12, verbose_name='–ü—Ä–æ–º–æ–∫–æ–¥', validators=[promo_validator])
    discount = models.IntegerField(verbose_name='–°–∫–∏–¥–∫–∞ (%)', validators=[MinValueValidator(0), MaxValueValidator(100)])
    status = models.IntegerField(verbose_name='–°—Ç–∞—Ç—É—Å', choices=((0, '–ù–µ –∞–∫—Ç–∏–≤–Ω—ã–π'), (1, '–ê–∫—Ç–∏–Ω–≤—ã–π')), default=1)

    def __str__(self):
        return self.promocode

    class Meta:
        verbose_name = "–ø—Ä–æ–º–æ–∫–æ–¥"
        verbose_name_plural = "üî≤ –ü–†–û–ú–û–ö–û–î–´ - –°–ü–û–†–¢–ò–í–ù–û–ï –ü–ò–¢–ê–ù–ò–ï"


class PromocodesBrands(models.Model):
    """–ü—Ä–æ–º–æ–∫–æ–¥—ã"""
    brands = models.ManyToManyField(Brands, verbose_name='–ë—Ä–µ–Ω–¥—ã')
    type_active = models.CharField(max_length=100, verbose_name='–ê–∫—Ç–∏–≤–µ–Ω –ø–æ', choices=(('date', '–î–ê–¢–ï/–í–†–ï–ú–ï–ù–ò'), ('count', '–ö–û–õ–ò–ß–ï–°–¢–í–£ –ê–ö–¢–ò–í–ê–¶–ò–ô')))

    date_active = models.DateTimeField(verbose_name='–î–∞—Ç–∞/–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', null=True, blank=True, help_text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏<br></b>–ê–∫—Ç–∏–≤–µ–Ω –ø–æ –î–ê–¢–ï/–í–†–ï–ú–ï–ù–ò</b>')
    count_active = models.IntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π', null=True, blank=True, validators=[MinValueValidator(1)],
                                       help_text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏<br></b>–ê–∫—Ç–∏–≤–µ–Ω –ø–æ –ö–û–õ–ò–ß–ï–°–¢–í–£ –ê–ö–¢–ò–í–ê–¶–ò–ô</b>')

    promocode = models.CharField(max_length=12, verbose_name='–ü—Ä–æ–º–æ–∫–æ–¥', validators=[promo_validator])
    discount = models.IntegerField(verbose_name='–°–∫–∏–¥–∫–∞ (%)', validators=[MinValueValidator(0), MaxValueValidator(100)])
    status = models.IntegerField(verbose_name='–°—Ç–∞—Ç—É—Å', choices=((0, '–ù–µ –∞–∫—Ç–∏–≤–Ω—ã–π'), (1, '–ê–∫—Ç–∏–Ω–≤—ã–π')), default=1)

    def __str__(self):
        return self.promocode

    class Meta:
        verbose_name = "–ø—Ä–æ–º–æ–∫–æ–¥"
        verbose_name_plural = "üî≤ –ü–†–û–ú–û–ö–û–î–´ - –ë–†–ï–ù–î–´"


class PromocodesActivate(models.Model):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
    user_id = models.ForeignKey(Users, on_delete=models.SET_NULL, null=True, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    promocode = models.CharField(max_length=12, verbose_name='–ü—Ä–æ–º–æ–∫–æ–¥')
    date_time = models.CharField(max_length=100, verbose_name='–î–∞—Ç–∞/–í—Ä–µ–º—è')

    def __str__(self):
        return self.promocode

    class Meta:
        verbose_name = "–ø—Ä–æ–º–æ–∫–æ–¥"
        verbose_name_plural = "üî≤ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–´–ï –ü–†–û–ú–û–ö–û–î–´"
### –ü–†–û–ú–û–ö–û–î–´ ###


### –ê–î–ú–ò–ù –ë–û–¢–ê ###
class BotAdmin(models.Model):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞"""
    user_id = models.CharField(verbose_name='user_id - –∞–¥–º–∏–Ω–∞', max_length=100)

    def __str__(self):
        return self.user_id

    class Meta:
        verbose_name = "–∞–¥–º–∏–Ω–∞"
        verbose_name_plural = "üîí –ê–î–ú–ò–ù –ë–û–¢–ê"
### –ê–î–ú–ò–ù –ë–û–¢–ê ###